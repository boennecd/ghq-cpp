
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> eta <- matrix(c(-0.231792563572526, 0.539682839997113, -0.00460151582956314, 0.435237016528845, 0.983812189660966, -0.239929641131312, 0.554890442639589, 0.869410462211818, -0.575714957434684, 0.303347532171756, -0.748889808077365, -0.465558662544936), 3)
> Sigma <- matrix(c(1.07173376588632, 0.760530258851724, -0.920427236518008, 0.760530258851724, 3.4214999078618, -1.56325086522103, -0.920427236518008, -1.56325086522103, 2.44510218991128), 3)
> which_cat <- 1:4 - 1L
> n <- NCOL(Sigma)
> 
> library(ghqCpp)
> 
> dat <- fastGHQuad::gaussHermiteData(10)
> 
> microbenchmark::microbenchmark(
+   integral =
+     mixed_mult_logit_term(
+       eta, Sigma, which_cat, nodes = dat$x, weights = dat$w,
+       use_adaptive = FALSE),
+   `integral adaptive` =
+     mixed_mult_logit_term(
+       eta, Sigma, which_cat, nodes = dat$x, weights = dat$w,
+       use_adaptive = TRUE),
+   grad =
+     mixed_mult_logit_term_grad(
+       eta, Sigma, which_cat, nodes = dat$x, weights = dat$w,
+       use_adaptive = FALSE),
+   `grad adaptive` =
+     mixed_mult_logit_term_grad(
+       eta, Sigma, which_cat, nodes = dat$x, weights = dat$w,
+       use_adaptive = TRUE),
+   times = 10000)
Unit: microseconds
              expr     min       lq      mean  median       uq      max neval
          integral  80.335  82.6830  84.11482  82.901  83.2985  240.197 10000
 integral adaptive  97.264  98.6085 100.50037  98.856  99.3590 1072.291 10000
              grad 112.041 113.5420 115.52673 113.723 114.1955  253.545 10000
     grad adaptive 129.385 130.2330 132.72988 130.459 131.1870 1202.793 10000
> 
> proc.time()
   user  system elapsed 
  4.574   0.017   4.585 
